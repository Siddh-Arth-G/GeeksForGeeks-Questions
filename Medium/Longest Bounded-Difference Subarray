//////////Question Link

https://www.geeksforgeeks.org/problems/longest-bounded-difference-subarray/1

//////////Solution

class Solution {

    public ArrayList<Integer> longestSubarray(int[] arr, int x) {
        // TreeMap acts as a multiset storing element frequencies.
        TreeMap<Integer, Integer> map = new TreeMap<>();
        int maxi = 0, curr = 0, ind = 0;
        int j = 0, n = arr.length;

        for (int i = 0; i < n; i++) {
            // Add current element to the multiset.
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
            curr++;

            // Adjust the window until the difference condition holds.
            while (!map.isEmpty() && (map.lastKey() - map.firstKey() > x)) {
                int count = map.get(arr[j]);
                if (count == 1) {
                    map.remove(arr[j]);
                } else {
                    map.put(arr[j], count - 1);
                }
                j++;
                curr--;
            }

            // Update maximum window length and the index of the window's end.
            if (curr > maxi) {
                maxi = curr;
                ind = i;
            }
        }

        // Build the result subarray.
        ArrayList<Integer> result = new ArrayList<>();
        for (int i = ind - maxi + 1; i <= ind; i++) {
            result.add(arr[i]);
        }
        return result;
    }
}
