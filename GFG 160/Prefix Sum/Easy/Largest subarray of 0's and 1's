//////////Question Link

https://www.geeksforgeeks.org/batch/gfg-160-problems/track/prefix-sum-gfg-160/problem/largest-subarray-of-0s-and-1s

//////////Solution




class Solution {
    public int maxLen(int[] arr) {
        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 0);
        int res = 0;
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i] == 0 ? -1 : 1;
            if (sum == 0) res = i+1;
            else if (map.containsKey(sum)) res = Math.max(res, i-map.get(sum));
            
            if (!map.containsKey(sum)) map.put(sum, i);
        }
        return res;
    }
    private int solve(int[] arr, int i, int j, int one, int zero) {
        if (i == j) return 0;
        if (one == zero) return j+1-i;
        
        int max = 0;
        max = Math.max(max, solve(
            arr, i+1, j, arr[i] == 1 ? one - 1 : one , arr[i] == 0 ? zero - 1 : zero    
        ));
        max = Math.max(max, solve(
            arr, i, j-1, arr[j] == 1 ? one - 1 : one, arr[j] == 0 ? zero - 1 : zero
        ));
        return max;
    }
}
