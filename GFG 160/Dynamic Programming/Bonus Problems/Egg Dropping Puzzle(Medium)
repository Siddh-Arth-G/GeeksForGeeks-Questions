//////////Question Link

https://www.geeksforgeeks.org/batch/gfg-160-problems/track/dp-bonus-problems/problem/egg-dropping-puzzle-1587115620

//////////Solution

class Solution {

    // Function to find minimum number of attempts needed in
    // order to find the critical floor.
    static int eggDrop(int n, int k) {
        // code here
        int[][] dp = new int[n+1][k+1];
        for(int i=1; i<=n; i++){
            dp[i][0] = 0;
            dp[i][1] = 1;
        }
        for(int j=1; j <= k; j++){
            dp[1][j] = j;
        }
        for(int i=2; i<=n; i++){
            for(int j=2; j<=k; j++){
                dp[i][j] = Integer.MAX_VALUE;
                int left = 1;
                int right = j;
                while(left <= right){
                    int mid = left + (right - left)/2;
                    int eggBroken = dp[i-1][mid-1];
                    int eggSurvived = dp[i][j - mid];
                    
                    int temp = 1 + Math.max(eggBroken, eggSurvived);
                    dp[i][j] = Math.min(temp, dp[i][j]);
                    
                    if(eggBroken < eggSurvived){
                        left = mid + 1;
                    }else{
                        right = mid - 1;
                    }
                }
            }
        }
        return dp[n][k];
    }
}
