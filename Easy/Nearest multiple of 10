//////////Quesyion Link

https://www.geeksforgeeks.org/problems/nearest-multiple-of-102437/1

//////////Solution

import java.math.BigInteger;

class Solution {

    String roundToNearest(String str) {
        // Complete the function
        int zeroes = 0;
        while(zeroes < str.length() && str.charAt(zeroes) == '0'){
            zeroes++;
        }
        BigInteger num = new BigInteger(str);
        BigInteger rem = num.mod(BigInteger.TEN);
        if(rem.compareTo(BigInteger.valueOf(5)) <= 0){
            num = num.subtract(rem);
        }else{
            num = num.add(BigInteger.TEN.subtract(rem));
        }
        
        String result = num.toString();
        if(zeroes > 0){
            StringBuilder sb = new StringBuilder();
            for(int i=0; i<zeroes; i++){
                sb.append('0');
            }
            sb.append(result);
            result = sb.toString();
        }
        return result;
    }
}



//////////2nd approach

import java.math.BigInteger;

class Solution {

    String roundToNearest(String str) {
        // Trim leading zeros to work with the main number
        String trimmedStr = str.replaceFirst("^0+", "");
        
        // If the number is all zeros, return it directly
        if (trimmedStr.isEmpty()) {
            return str;
        }

        BigInteger num = new BigInteger(trimmedStr);
        BigInteger rem = num.mod(BigInteger.TEN);

        // Round the number based on the remainder
        if (rem.compareTo(BigInteger.valueOf(5)) > 0) {
            num = num.add(BigInteger.TEN.subtract(rem));
        } else {
            num = num.subtract(rem);
        }

        // Return the result, adding back any leading zeros from the original string
        return str.substring(0, str.length() - trimmedStr.length()) + num.toString();
    }
}
