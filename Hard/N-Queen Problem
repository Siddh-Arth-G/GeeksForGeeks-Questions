class Solution {
    public void saveBoard(ArrayList<ArrayList<Integer>> allBoard, char[][] board){
        ArrayList<Integer> list = new ArrayList<>();
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board.length; j++){
                if(board[i][j] == 'Q'){
                    int val = j + 1;
                    list.add(val);
                }
            }
        }
        allBoard.add(list);
    }
    
    public boolean isSafe(int row, int col, char[][] board){
        // row check
        for(int r=0; r<board.length; r++){
            if(board[r][col] == 'Q'){
                return false;
            }
        }
        
        // column check
        for(int c=0; c<board.length; c++){
            if(board[row][c] == 'Q'){
                return false;
            }
        }
        
        // left upper diagonal check
        int r=row;
        for(int c=col; r>=0 && c>=0; r--,c--){
            if(board[r][c] == 'Q'){
                return false;
            }
        }
        
        // right upper digonal check
        r = row;
        for(int c=col; r>=0 && c<board[0].length; r--,c++){
            if(board[r][c] == 'Q'){
                return false;
            }
        }
        
        // left bottom diagonal check
        r = row;
        for(int c=col; r<board.length && c>=0; r++,c--){
            if(board[r][c] == 'Q'){
                return false;
            }
        }
        
        // right bottom digonal check
        r = row;
        for(int c= col; r<board.length && c<board.length; r++,c++){
            if(board[r][c] == 'Q'){
                return false;
            }
        }
        
        return true;
    }
    
    public void queens(ArrayList<ArrayList<Integer>> allBoard, char[][] board, int row){
        if(row == board.length){
            saveBoard(allBoard, board);
            return;
        }
        for(int col=0; col<board.length; col++){
            if(isSafe(row, col, board)){
                board[row][col] = 'Q';
                queens(allBoard, board, row+1);
                board[row][col] = '-';
            }
        }
    }
    public ArrayList<ArrayList<Integer>> nQueen(int n) {
        // code here
        ArrayList<ArrayList<Integer>> allBoard = new ArrayList<>();
        char[][] board = new char[n][n];
        queens(allBoard, board, 0);
        return allBoard;
    }
}
