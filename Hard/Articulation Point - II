//////////Question Link

https://www.geeksforgeeks.org/problems/articulation-point2616/1

//////////Solution

class Solution {
    static int time;
    static ArrayList<Integer> articulationPoints(int V, int[][] edges) {
        // code here
        List<List<Integer>> adj = new ArrayList<>();
        for(int i=0;i<V;i++) adj.add(new ArrayList<>());
        
        for(int edge[]:edges){
            int u =edge[0],v=edge[1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        
        time=0;
        int[] disc=new int[V];
        int[] low=new int[V];
        int[] parent=new int[V];
        boolean[] visited=new boolean[V];
        boolean[] isAP=new boolean[V];
        Arrays.fill(parent,-1);
        
        for(int i=0;i<V;i++){
            if(!visited[i]){
                dfs(i,adj,visited,disc,low,parent,isAP);
            }
        }
        
        ArrayList<Integer> result = new ArrayList<>();
        for(int i=0;i<V;i++){
            if(isAP[i]) result.add(i);
        }
        return result.isEmpty() ? new ArrayList<>(Arrays.asList(-1)) : result;
    }
    
    private static void dfs(int u,List<List<Integer>> adj,boolean[] visited,int[] disc,int[] low,int[] parent,boolean[] isAP){
        visited[u] = true;
        disc[u] = low[u]=++time;
        int children =0;
        
        for(int v:adj.get(u)){
            if(!visited[v]){
                children++;
                parent[v]=u;
                dfs(v,adj,visited,disc,low,parent,isAP);
                
                low[u]=Math.min(low[u],low[v]);
                
                if(parent[u] == -1 && children > 1) {
                    isAP[u]=true;
                }
                if(parent[u] != -1 && low[v]>=disc[u]){
                    isAP[u]=true;
                } 
            } else if(v!=parent[u]){
                low[u]=Math.min(low[u],disc[v]);
            }
        }
    }
}
