class Solution {
    
    // DFS function
    public void DFS(int node, List<Integer>[] adj, boolean[] visited) {
        visited[node] = true;
        for (int neighbor : adj[node]) {
            if (!visited[neighbor]) {
                DFS(neighbor, adj, visited);
            }
        }
    }

    public int isCircle(String[] arr) {
        // Create adjacency list and in-degree/out-degree arrays
        List<Integer>[] adj = new ArrayList[26];
        int[] InDeg = new int[26];
        int[] OutDeg = new int[26];

        // Initialize adjacency list
        for (int i = 0; i < 26; i++) {
            adj[i] = new ArrayList<>();
        }

        // Create the graph and compute in-degrees and out-degrees
        for (String temp : arr) {
            int u = temp.charAt(0) - 'a';  // first character
            int v = temp.charAt(temp.length() - 1) - 'a';  // last character
            adj[u].add(v);
            OutDeg[u]++;  // Outgoing edge from u
            InDeg[v]++;   // Incoming edge to v
        }

        // Check if in-degree equals out-degree for all characters
        for (int i = 0; i < 26; i++) {
            if (InDeg[i] != OutDeg[i]) {
                return 0;
            }
        }

        // Check if the graph is strongly connected
        boolean[] visited = new boolean[26];
        int node = arr[0].charAt(0) - 'a'; // Start DFS from the first character
        DFS(node, adj, visited);

        for (int i = 0; i < 26; i++) {
            if (InDeg[i] > 0 && !visited[i]) {
                return 0;
            }
        }

        return 1;
    }
}
