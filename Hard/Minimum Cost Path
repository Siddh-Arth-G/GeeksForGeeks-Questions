class Solution
{
    //Function to return the minimum cost to react at bottom
	//right cell from top left cell.
	int[] xDir = {1, -1, 0, 0};
	int[] yDir = {0, 0, 1, -1};
    public int minimumCostPath(int[][] grid)
    {
        // Code here
        int n=grid.length;
        int m=grid[0].length;
        
        PriorityQueue<int[]>pq = new PriorityQueue<>((a,b)->a[0]-b[0]);
        pq.add(new int[]{grid[0][0], 0, 0});
        
        int[][] distance = new int[m][n];
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                distance[i][j] = Integer.MAX_VALUE;
            }
        }
        
        distance[0][0] = 0;
        
        while(!pq.isEmpty()){
            int[] element = pq.poll();
            
            if(element[1] == n-1 && element[2] == m-1){
                return distance[n-1][m-1];
            }
            
            for(int i=0; i<4; i++){
                int newX = element[1] + xDir[i];
                int newY = element[2] + yDir[i];
                
                if(newX>=0 && newX<n && newY>=0 && newY<m){
                    int w = grid[newX][newY];
                    
                    if(element[0]+w < distance[newX][newY]){
                        distance[newX][newY] = element[0]+w;
                        pq.add(new int[]{distance[newX][newY],newX,newY});
                    }
                }
            }
        }
        return distance[n-1][m-1];
    }
}
